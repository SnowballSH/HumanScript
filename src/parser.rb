#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

  require "#{File.dirname(__FILE__)}/lexer.rb"
  require "#{File.dirname(__FILE__)}/nodes.rb"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y.rb/module_eval...', 'grammar.y.rb', 113)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end
  
  def next_token
    @tokens.shift
  end

  def on_error(*e)
    x = e[1] == '$' ? 'End of file' : e[1]
    puts "Invalid Syntax: '#{x}'"
    exit
  end
  
...end grammar.y.rb/module_eval...
##### State transition tables begin ###

racc_action_table = [
     6,    15,     5,    17,    18,    38,    68,    19,    20,    24,
    40,    36,    46,    24,    24,    24,    29,    14,    71,    16,
    21,     6,    15,     5,    17,    18,    66,    21,    19,    20,
    47,    21,    21,    21,    24,    24,    24,    71,    14,    35,
    16,    21,     6,    15,     5,    17,    18,    66,    29,    19,
    20,    56,    21,    21,    21,    63,    32,    62,    34,    14,
    34,    16,    21,     6,    15,    37,    17,    18,    61,    76,
    19,    20,    22,    29,    27,    28,    25,    26,    53,   nil,
    14,    48,    16,     6,    15,   nil,    17,    18,   nil,   nil,
    19,    20,    29,    27,    28,    25,    26,    73,   nil,    72,
    14,   nil,    16,     6,    15,   nil,    17,    18,   nil,   nil,
    19,    20,    29,    27,    28,    25,    26,    29,    27,    28,
    14,   nil,    16,     6,    15,   nil,    17,    18,   nil,   nil,
    19,    20,    29,    27,    28,    25,    26,    29,    27,    28,
    14,   nil,    16,     6,    15,   nil,    17,    18,   nil,   nil,
    19,    20,    29,    27,    28,    25,    26,   nil,   nil,   nil,
    14,   nil,    16,     6,    15,   nil,    17,    18,   nil,   nil,
    19,    20,    77,    29,    27,    28,    25,    26,   nil,   nil,
    14,   nil,    16,     6,    15,   nil,    17,    18,   nil,   nil,
    19,    20,    29,    27,    28,    25,    26,   nil,   nil,   nil,
    14,   nil,    16,     6,    15,   nil,    17,    18,   nil,   nil,
    19,    20,    29,    27,    28,    25,    26,   nil,   nil,   nil,
    14,   nil,    16,     6,    15,   nil,    17,    18,   nil,   nil,
    19,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    14,   nil,    16,     6,    15,   nil,    17,    18,   nil,   nil,
    19,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    14,   nil,    16,     6,    15,   nil,    17,    18,   nil,   nil,
    19,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    14,   nil,    16,     6,    15,   nil,    17,    18,   nil,   nil,
    19,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    14,   nil,    16,     6,    15,    24,    17,    18,   nil,   nil,
    19,    20,   nil,    29,    27,    28,    25,    26,   nil,   nil,
    14,    51,    16,    21 ]

racc_action_check = [
     0,     0,     0,     0,     0,    19,    56,     0,     0,    72,
    22,    17,    29,    38,     2,    69,    44,     0,    69,     0,
     0,    58,    58,    58,    58,    58,    58,    72,    58,    58,
    29,    38,     2,    69,    65,    77,    37,    65,    58,    16,
    58,    58,    54,    54,    54,    54,    54,    54,    45,    54,
    54,    37,    65,    77,    37,    52,    15,    52,    15,    54,
    46,    54,    54,     5,     5,    18,     5,     5,    47,    73,
     5,     5,     1,    31,    31,    31,    31,    31,    36,   nil,
     5,    31,     5,    32,    32,   nil,    32,    32,   nil,   nil,
    32,    32,    30,    30,    30,    30,    30,    67,   nil,    67,
    32,   nil,    32,    27,    27,   nil,    27,    27,   nil,   nil,
    27,    27,    41,    41,    41,    41,    41,    43,    43,    43,
    27,   nil,    27,    26,    26,   nil,    26,    26,   nil,   nil,
    26,    26,    70,    70,    70,    70,    70,    42,    42,    42,
    26,   nil,    26,    63,    63,   nil,    63,    63,   nil,   nil,
    63,    63,    64,    64,    64,    64,    64,   nil,   nil,   nil,
    63,   nil,    63,    74,    74,   nil,    74,    74,   nil,   nil,
    74,    74,    74,     3,     3,     3,     3,     3,   nil,   nil,
    74,   nil,    74,    14,    14,   nil,    14,    14,   nil,   nil,
    14,    14,    50,    50,    50,    50,    50,   nil,   nil,   nil,
    14,   nil,    14,    28,    28,   nil,    28,    28,   nil,   nil,
    28,    28,    49,    49,    49,    49,    49,   nil,   nil,   nil,
    28,   nil,    28,    20,    20,   nil,    20,    20,   nil,   nil,
    20,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    20,   nil,    20,    53,    53,   nil,    53,    53,   nil,   nil,
    53,    53,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    53,   nil,    53,    23,    23,   nil,    23,    23,   nil,   nil,
    23,    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,   nil,    23,    25,    25,   nil,    25,    25,   nil,   nil,
    25,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    25,   nil,    25,    34,    34,    39,    34,    34,   nil,   nil,
    34,    34,   nil,    39,    39,    39,    39,    39,   nil,   nil,
    34,    34,    34,    39 ]

racc_action_pointer = [
    -2,    72,    10,   161,   nil,    61,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   181,    39,    36,     8,    62,     2,
   221,   nil,    10,   261,   nil,   281,   121,   101,   201,     9,
    80,    61,    81,   nil,   301,   nil,    70,    32,     9,   301,
   nil,   100,   125,   105,     4,    36,    41,    65,   nil,   200,
   180,   nil,    37,   241,    40,   nil,     3,   nil,    19,   nil,
   nil,   nil,   nil,   141,   140,    30,   nil,    79,   nil,    11,
   120,   nil,     5,    66,   161,   nil,   nil,    31,   nil ]

racc_action_default = [
    -1,   -45,    -2,    -3,    -6,   -43,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -45,   -21,   -45,   -45,   -45,   -45,
   -45,   -44,   -45,    -5,   -43,   -45,   -45,   -45,   -45,   -45,
    -7,   -45,   -45,   -27,   -45,   -23,   -45,   -45,   -45,   -45,
    79,    -4,   -17,   -18,   -19,   -20,   -22,   -45,   -16,   -26,
   -31,   -29,   -45,   -45,   -45,   -35,   -38,   -37,   -45,   -42,
   -28,   -24,   -30,   -45,   -25,   -45,   -34,   -45,   -39,   -45,
   -32,   -33,   -45,   -45,    -5,   -36,   -40,   -45,   -41 ]

racc_goto_table = [
    30,     4,     2,    23,    55,    57,    59,    33,    52,    31,
    67,     1,   nil,   nil,   nil,    39,   nil,   nil,    41,   nil,
    42,    43,    44,    45,   nil,   nil,   nil,    49,   nil,    50,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    60,    75,
    58,   nil,   nil,   nil,    78,   nil,   nil,   nil,    64,   nil,
   nil,   nil,   nil,   nil,   nil,     4,    65,   nil,    70,     4,
    69,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,    41,
    74 ]

racc_goto_check = [
     3,     4,     2,     4,    14,    14,    14,    12,    13,     3,
    15,     1,   nil,   nil,   nil,     3,   nil,   nil,     3,   nil,
     3,     3,     3,     3,   nil,   nil,   nil,     3,   nil,     3,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,    14,
     4,   nil,   nil,   nil,    14,   nil,   nil,   nil,     3,   nil,
   nil,   nil,   nil,   nil,   nil,     4,     2,   nil,     3,     4,
     2,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,     3,
     4 ]

racc_goto_pointer = [
   nil,    11,     2,    -5,     1,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    -8,   -26,   -33,   -46 ]

racc_goto_default = [
   nil,   nil,   nil,     3,    54,     7,     8,     9,    10,    11,
    12,    13,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 24, :_reduce_1,
  1, 24, :_reduce_2,
  1, 25, :_reduce_3,
  3, 25, :_reduce_4,
  2, 25, :_reduce_5,
  1, 25, :_reduce_6,
  2, 25, :_reduce_7,
  1, 26, :_reduce_8,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  3, 26, :_reduce_16,
  3, 28, :_reduce_17,
  3, 28, :_reduce_18,
  3, 28, :_reduce_19,
  3, 28, :_reduce_20,
  1, 31, :_reduce_21,
  3, 31, :_reduce_22,
  2, 31, :_reduce_23,
  4, 31, :_reduce_24,
  4, 32, :_reduce_25,
  3, 32, :_reduce_26,
  2, 29, :_reduce_27,
  4, 29, :_reduce_28,
  2, 35, :_reduce_29,
  3, 35, :_reduce_30,
  1, 36, :_reduce_31,
  3, 36, :_reduce_32,
  3, 37, :_reduce_33,
  2, 37, :_reduce_34,
  3, 30, :_reduce_35,
  6, 30, :_reduce_36,
  3, 33, :_reduce_37,
  0, 38, :_reduce_38,
  1, 38, :_reduce_39,
  3, 38, :_reduce_40,
  7, 34, :_reduce_41,
  3, 34, :_reduce_42,
  1, 27, :_reduce_43,
  1, 27, :_reduce_44 ]

racc_reduce_n = 45

racc_shift_n = 79

racc_token_table = {
  false => 0,
  :error => 1,
  :INTEGER => 2,
  :IDEN => 3,
  :NEWLINE => 4,
  :DEFINE => 5,
  :DEF => 6,
  :END => 7,
  :AS => 8,
  :CLASS => 9,
  :IF => 10,
  :ELSE => 11,
  "." => 12,
  "*" => 13,
  "/" => 14,
  "+" => 15,
  "-" => 16,
  "=" => 17,
  "," => 18,
  "(" => 19,
  ")" => 20,
  "&" => 21,
  ";" => 22 }

racc_nt_base = 23

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INTEGER",
  "IDEN",
  "NEWLINE",
  "DEFINE",
  "DEF",
  "END",
  "AS",
  "CLASS",
  "IF",
  "ELSE",
  "\".\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\"&\"",
  "\";\"",
  "$start",
  "Program",
  "Expressions",
  "Expression",
  "Terminator",
  "Operation",
  "Call",
  "Def",
  "Get",
  "Set",
  "Class",
  "Cond",
  "Arguments",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y.rb', 16)
  def _reduce_1(val, _values, result)
     result = Nodes.new([])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 17)
  def _reduce_2(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 21)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 22)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 23)
  def _reduce_5(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 24)
  def _reduce_6(val, _values, result)
     result = Nodes.new([])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 25)
  def _reduce_7(val, _values, result)
     result = Nodes.new([val[1]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 29)
  def _reduce_8(val, _values, result)
     result = IntegerNode.new(val[0].to_i)
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'grammar.y.rb', 37)
  def _reduce_16(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 41)
  def _reduce_17(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 42)
  def _reduce_18(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 43)
  def _reduce_19(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 44)
  def _reduce_20(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 48)
  def _reduce_21(val, _values, result)
     result = VarAccessNode.new(nil, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 49)
  def _reduce_22(val, _values, result)
     result = VarAccessNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 50)
  def _reduce_23(val, _values, result)
     result = StrictVarAccessNode.new(nil, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 51)
  def _reduce_24(val, _values, result)
     result = StrictVarAccessNode.new(val[0], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 55)
  def _reduce_25(val, _values, result)
     result = ConstantAssignNode.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 56)
  def _reduce_26(val, _values, result)
     result = VarAssignNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 60)
  def _reduce_27(val, _values, result)
     result = CallNode.new(nil, val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 62)
  def _reduce_28(val, _values, result)
     result = CallNode.new(val[0], val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 66)
  def _reduce_29(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 67)
  def _reduce_30(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 71)
  def _reduce_31(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 72)
  def _reduce_32(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 76)
  def _reduce_33(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 77)
  def _reduce_34(val, _values, result)
     result = Nodes.new([])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 81)
  def _reduce_35(val, _values, result)
     result = DefNode.new(val[1], [], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 83)
  def _reduce_36(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 87)
  def _reduce_37(val, _values, result)
     result = ClassNode.new(val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 91)
  def _reduce_38(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 92)
  def _reduce_39(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 93)
  def _reduce_40(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 98)
  def _reduce_41(val, _values, result)
     result = IfElseNode.new(val[1], val[3], val[6])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 99)
  def _reduce_42(val, _values, result)
     result = IfNode.new(val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 103)
  def _reduce_43(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 104)
  def _reduce_44(val, _values, result)
     result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
