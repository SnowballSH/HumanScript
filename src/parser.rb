#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

  require "#{File.dirname(__FILE__)}/lexer.rb"
  require "#{File.dirname(__FILE__)}/nodes.rb"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y.rb/module_eval...', 'grammar.y.rb', 35)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end
  
  def next_token
    @tokens.shift
  end

  def on_error(*e)
    x = e[1] == '$' ? 'End of file' : e[1]
    puts "Invalid Syntax: '#{x}'"
    exit
  end
  
...end grammar.y.rb/module_eval...
##### State transition tables begin ###

racc_action_table = [
     6,     7,    14,     8,     6,     7,    11,     8,     6,     7,
    16,     8,     6,     7,     5,     8,     9 ]

racc_action_check = [
    10,    10,     9,    10,     8,     8,     2,     8,     5,     5,
    13,     5,     0,     0,     0,     0,     1 ]

racc_action_pointer = [
    10,    16,     2,   nil,   nil,     6,   nil,   nil,     2,     2,
    -2,   nil,   nil,     4,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -12,    -2,    -3,    -6,   -11,    -8,    -9,   -12,   -12,
    -5,   -11,    -7,   -12,    17,    -4,   -10 ]

racc_goto_table = [
     3,     4,     2,    10,     1,    12,   nil,   nil,    13,   nil,
    15 ]

racc_goto_check = [
     3,     4,     2,     4,     1,     3,   nil,   nil,     3,   nil,
     3 ]

racc_goto_pointer = [
   nil,     4,     2,     0,     1 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 8, :_reduce_1,
  1, 8, :_reduce_2,
  1, 9, :_reduce_3,
  3, 9, :_reduce_4,
  2, 9, :_reduce_5,
  1, 9, :_reduce_6,
  2, 9, :_reduce_7,
  1, 10, :_reduce_8,
  1, 10, :_reduce_9,
  3, 10, :_reduce_10,
  1, 11, :_reduce_11 ]

racc_reduce_n = 12

racc_shift_n = 17

racc_token_table = {
  false => 0,
  :error => 1,
  :INTEGER => 2,
  :IDEN => 3,
  :NEWLINE => 4,
  "(" => 5,
  ")" => 6 }

racc_nt_base = 7

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INTEGER",
  "IDEN",
  "NEWLINE",
  "\"(\"",
  "\")\"",
  "$start",
  "Program",
  "Expressions",
  "Expression",
  "Terminator" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y.rb', 7)
  def _reduce_1(val, _values, result)
     result = Nodes.new([])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 8)
  def _reduce_2(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 12)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 13)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 14)
  def _reduce_5(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 15)
  def _reduce_6(val, _values, result)
     result = Nodes.new([])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 16)
  def _reduce_7(val, _values, result)
     result = Nodes.new([val[1]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 20)
  def _reduce_8(val, _values, result)
     result = IntegerNode.new(val[0].to_i)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 21)
  def _reduce_9(val, _values, result)
     result = VarAccessNode.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 22)
  def _reduce_10(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 26)
  def _reduce_11(val, _values, result)
     result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
