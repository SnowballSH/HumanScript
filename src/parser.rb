#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

  require "#{File.dirname(__FILE__)}/lexer.rb"
  require "#{File.dirname(__FILE__)}/nodes.rb"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y.rb/module_eval...', 'grammar.y.rb', 67)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end
  
  def next_token
    @tokens.shift
  end

  def on_error(*e)
    x = e[1] == '$' ? 'End of file' : e[1]
    puts "Invalid Syntax: '#{x}'"
    exit
  end
  
...end grammar.y.rb/module_eval...
##### State transition tables begin ###

racc_action_table = [
     6,    11,    17,     9,     6,    11,    23,     9,     6,    11,
     5,     9,    15,    10,    27,     6,    11,    10,     9,     6,
    11,    10,     9,     6,    11,    15,     9,    32,    10,    31,
     6,    11,    10,     9,    25,    24,    10,    21,    14,    15,
    20,    12,    15,    10,    20,    15,    15,    15 ]

racc_action_check = [
    20,    20,     9,    20,    24,    24,    15,    24,     0,     0,
     0,     0,     3,    20,    20,    32,    32,    24,    32,     5,
     5,     0,     5,    13,    13,    18,    13,    28,    32,    28,
    10,    10,     5,    10,    18,    17,    13,    12,     2,    22,
    23,     1,    26,    10,    11,    30,    16,    33 ]

racc_action_pointer = [
     6,    41,    34,     5,   nil,    17,   nil,   nil,   nil,    -1,
    28,    29,    37,    21,   nil,     3,    39,    29,    18,   nil,
    -2,   nil,    32,    25,     2,   nil,    35,   nil,    13,   nil,
    38,   nil,    13,    40 ]

racc_action_default = [
    -1,   -22,    -2,    -3,    -6,   -21,    -8,    -9,   -10,   -22,
   -22,   -13,   -22,    -5,   -21,   -22,    -7,   -22,   -22,   -15,
   -22,    34,    -4,   -14,   -22,   -12,   -19,   -17,   -22,   -16,
   -11,   -18,   -22,   -20 ]

racc_goto_table = [
     3,     4,    19,    13,     2,    16,    28,     1,   nil,   nil,
    18,   nil,   nil,    22,    29,   nil,   nil,   nil,   nil,   nil,
    26,   nil,   nil,   nil,    30,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    33 ]

racc_goto_check = [
     3,     4,     7,     4,     2,     3,     8,     1,   nil,   nil,
     3,   nil,   nil,     3,     7,   nil,   nil,   nil,   nil,   nil,
     3,   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     7,     4,     0,     1,   nil,   nil,    -9,   -14 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     7,     8,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 18, :_reduce_1,
  1, 18, :_reduce_2,
  1, 19, :_reduce_3,
  3, 19, :_reduce_4,
  2, 19, :_reduce_5,
  1, 19, :_reduce_6,
  2, 19, :_reduce_7,
  1, 20, :_reduce_8,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  4, 20, :_reduce_11,
  3, 20, :_reduce_12,
  1, 23, :_reduce_13,
  3, 23, :_reduce_14,
  2, 22, :_reduce_15,
  4, 22, :_reduce_16,
  2, 24, :_reduce_17,
  3, 24, :_reduce_18,
  1, 25, :_reduce_19,
  3, 25, :_reduce_20,
  1, 21, :_reduce_21 ]

racc_reduce_n = 22

racc_shift_n = 34

racc_token_table = {
  false => 0,
  :error => 1,
  :INTEGER => 2,
  :IDEN => 3,
  :NEWLINE => 4,
  :DEFINE => 5,
  :AS => 6,
  "." => 7,
  "!" => 8,
  "*" => 9,
  "/" => 10,
  "+" => 11,
  "-" => 12,
  "=" => 13,
  "," => 14,
  "(" => 15,
  ")" => 16 }

racc_nt_base = 17

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INTEGER",
  "IDEN",
  "NEWLINE",
  "DEFINE",
  "AS",
  "\".\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Program",
  "Expressions",
  "Expression",
  "Terminator",
  "Call",
  "Get",
  "Arguments",
  "ArgList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y.rb', 16)
  def _reduce_1(val, _values, result)
     result = Nodes.new([])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 17)
  def _reduce_2(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 21)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 22)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 23)
  def _reduce_5(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 24)
  def _reduce_6(val, _values, result)
     result = Nodes.new([])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 25)
  def _reduce_7(val, _values, result)
     result = Nodes.new([val[1]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 29)
  def _reduce_8(val, _values, result)
     result = IntegerNode.new(val[0].to_i)
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'grammar.y.rb', 32)
  def _reduce_11(val, _values, result)
     result = VarAssignNode.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 33)
  def _reduce_12(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 37)
  def _reduce_13(val, _values, result)
     result = VarAccessNode.new(nil, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 38)
  def _reduce_14(val, _values, result)
     result = VarAccessNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 42)
  def _reduce_15(val, _values, result)
     result = CallNode.new(nil, val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 44)
  def _reduce_16(val, _values, result)
     result = CallNode.new(val[0], val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 48)
  def _reduce_17(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 49)
  def _reduce_18(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 53)
  def _reduce_19(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 54)
  def _reduce_20(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 58)
  def _reduce_21(val, _values, result)
     result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
